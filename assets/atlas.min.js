'use strict';class AtlasStitcher{constructor(){this.canvas=document.createElement("canvas");this.ctx=this.canvas.getContext("2d")}draw(a,b,c,k){const f=a.height,g=a.width;var e=b.width;const h=b.height,l=c.padding;c=c.cellSize;const d=c-2*l,n=e+d-1-(e+d-1)%d,p=h+d-1-(h+d-1)%d;this.canvas.width=e;this.canvas.height=h;this.ctx.clearRect(0,0,e,h);e=0;for(const m of b.cellIndexList){if(m!=b.transparentIndex){const q=e%(n/d)*d,r=p-d*(1+intdiv(e,n/d))-(p-h),t=m%(g/c)*c+l,u=f-c*(1+intdiv(m,g/c))+l;this.ctx.drawImage(a,t,u,d,d,q,r,d,d)}e++}k.src=this.canvas.toDataURL("image/png")}}async function getJson(a){return await Promise.all(a.map(b=>fetch(`/cdn/MonoBehaviour/${b}.json`)))}async function collectSprites(a){const b=document.createElement("select"),c={};for(const k of a){if(200!=k.status){console.log(k);continue}a=await k.json();const f=a.m_Name;c[f]=a;for(const g of a.textureDataList)b.add(new Option(g.name,`${f}:${g.name}`))}return{manifest:c,select:b}}const atlasObserver=new IntersectionObserver((a,b)=>{a.forEach(c=>{c.isIntersecting&&(atlasHandler(c.target),b.unobserve(c.target))})});async function atlasHandler(a){var b=a.dataset.sprites.split(",");const c=a.querySelector("img");b=await getJson(b);const {manifest:k,select:f}=await collectSprites(b);a.appendChild(f);f.addEventListener("change",()=>{const g=f.value.split(":"),e=k[g[0]],h=e.textureDataList.find(d=>d.name==g[1]),l=new Image;l.onload=()=>{window.atlasSticher=window.atlasSticher||new AtlasStitcher;atlasSticher.draw(l,h,e,c)};l.src=`/cdn/Texture2D/${h.atlasName}.png`});f.dispatchEvent(new Event("change"))}document.querySelectorAll(".atlas-gallery").forEach(a=>atlasObserver.observe(a));function intdiv(a,b){return Math.floor(a/b)};